package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Service;

import com.example.demo.object.User;
import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.cloud.firestore.WriteResult;
import com.google.firebase.cloud.FirestoreClient;

@Service
public class FirebaseService {
	public String createNewUser(User user) throws InterruptedException, ExecutionException {
		Firestore dbFirestore = FirestoreClient.getFirestore();
		ApiFuture<WriteResult> collectionsApiFuture = dbFirestore.collection("users").document(user.getEmail()).set(user);
		return collectionsApiFuture.get().getUpdateTime().toString();
	}
	
	public User getUserDetails(String email) throws InterruptedException, ExecutionException {
		Firestore dbFirestore = FirestoreClient.getFirestore();
		DocumentReference documentReference = dbFirestore.collection("users").document(email);
		ApiFuture<DocumentSnapshot> future = documentReference.get();
		
		DocumentSnapshot document = future.get();
		
		User user = null;
		
		if (document.exists()) {
			user = document.toObject(User.class);
			return user;
		} else {
			return null;
		}
	}
	
	public String updateUser(User user) throws InterruptedException, ExecutionException {
		Firestore dbFirestore = FirestoreClient.getFirestore();
		ApiFuture<WriteResult> collectionsApiFuture = dbFirestore.collection("users").document(user.getEmail()).set(user);
		return collectionsApiFuture.get().getUpdateTime().toString();
	}
	
	public String deleteUser(String email) throws InterruptedException, ExecutionException {
		Firestore dbFirestore = FirestoreClient.getFirestore();
		ApiFuture<WriteResult> writeResult = dbFirestore.collection("users").document(email).delete();
		return "Document with Email " + email + " has been deleted.";
	}
	
	public List<User>  getUsers() throws InterruptedException, ExecutionException {
		Firestore dbFirestore = FirestoreClient.getFirestore();
		ApiFuture<QuerySnapshot> future = dbFirestore.collection("users").get();
		List<QueryDocumentSnapshot> documents = future.get().getDocuments();
		List<User> users = new ArrayList<>();
//		List<Map<String, Object>> output = new ArrayList<>();
		for (QueryDocumentSnapshot document : documents) {
			Map<String, Object> data = document.getData();
//			output.add(data);
			User newUser = new User();
			newUser.setEmail
			(String.valueOf(data.get("email")));
			newUser.setFirstName(String.valueOf(data.get("firstName")));
			newUser.setLastName(String.valueOf(data.get("lastName")));
			newUser.setPassword(String.valueOf(data.get("password")));
			users.add(newUser);
		}		
		return users;
	}
	
	
	public Cookie authenticate(String email, String password) throws InterruptedException, ExecutionException {
		Cookie cookie = new Cookie("user", email);
		cookie.setMaxAge(6 * 60 * 60);
//		cookie.setSecure(true);
//		cookie.setHttpOnly(true);
		cookie.setDomain("http://localhost:4500/");
//		cookie.setPath("/");
		return cookie;
	}
}
